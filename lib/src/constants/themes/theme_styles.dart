import 'package:flutter/material.dart';
import 'package:travo_app/src/constants/assets/fonts.gen.dart';
import 'package:travo_app/src/local_data/share_preference.dart';

String _appTheme = UserPrefs.I.getTheme();

// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'light': PrimaryColors(),
    'dark': PrimaryColors()
  };

  // A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'light': ColorSchemes.primaryColorScheme,
    'dark': ColorSchemes.secondaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.blueGray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(25),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 64,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 30,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.indigo40001,
          fontSize: 12,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 20,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 14,
          fontFamily: FontFamily.rubikBold,
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF8F67E8),
    primaryContainer: Color(0XFF232323),
    secondary: Color(0XFF232323),
    secondaryContainer: Color(0XFF838383),
    tertiary: Color(0XFF232323),
    tertiaryContainer: Color(0XFF8F67E8),

    // Background colors
    background: Color(0xFFF0F2F6),

    // Surface colors
    surface: Color(0XFF232323),
    surfaceTint: Color(0XFF232323),
    surfaceVariant: Color(0XFF8F67E8),

    // Error colors
    error: Color(0XFF232323),
    errorContainer: Color(0XFF8F67E8),
    onError: Color(0XFFFFC107),
    onErrorContainer: Color(0XFF232323),

    // On colors(text colors)
    onBackground: Color(0XFFFFC107),
    onInverseSurface: Color(0XFFFFC107),
    onPrimary: Color(0XFF232323),
    onPrimaryContainer: Color(0XFFFFC107),
    onSecondary: Color(0XFFFFC107),
    onSecondaryContainer: Color(0XFF232323),
    onTertiary: Color(0XFFFFC107),
    onTertiaryContainer: Color(0XFF232323),

    // Other colors
    outline: Color(0XFF232323),
    outlineVariant: Color(0XFF232323),
    scrim: Color(0XFF232323),
    shadow: Color(0XFF232323),

    // Inverse colors
    inversePrimary: Color(0XFF232323),
    inverseSurface: Color(0XFF232323),

    // Pending colors
    onSurface: Color(0XFFFFC107),
    onSurfaceVariant: Color(0XFF232323),
  );

  static const secondaryColorScheme = ColorScheme.dark(
    // Primary colors
    primary: Color(0XFF8F67E8),
    primaryContainer: Color(0XFF232323),
    secondary: Color(0XFF232323),
    secondaryContainer: Color(0XFF8F67E8),
    tertiary: Color(0XFF232323),
    tertiaryContainer: Color(0XFF8F67E8),

    // Background colors
    background: Color(0XFF232323),

    // Surface colors
    surface: Color(0XFF232323),
    surfaceTint: Color(0XFF232323),
    surfaceVariant: Color(0XFF8F67E8),

    // Error colors
    error: Color(0XFF232323),
    errorContainer: Color(0XFF8F67E8),
    onError: Color(0XFFFFC107),
    onErrorContainer: Color(0XFF232323),

    // On colors(text colors)
    onBackground: Color(0XFFFFC107),
    onInverseSurface: Color(0XFFFFC107),
    onPrimary: Color(0XFF232323),
    onPrimaryContainer: Color(0XFFFFC107),
    onSecondary: Color(0XFFFFC107),
    onSecondaryContainer: Color(0XFF232323),
    onTertiary: Color(0XFFFFC107),
    onTertiaryContainer: Color(0XFF232323),

    // Other colors
    outline: Color(0XFF232323),
    outlineVariant: Color(0XFF232323),
    scrim: Color(0XFF232323),
    shadow: Color(0XFF232323),

    // Inverse colors
    inversePrimary: Color(0XFF232323),
    inverseSurface: Color(0XFF232323),

    // Pending colors
    onSurface: Color(0XFFFFC107),
    onSurfaceVariant: Color(0XFF232323),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD7D7D7);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray50 => const Color(0XFFEFF2F5);
  Color get blueGray900 => const Color(0XFF2D3142);
  Color get blueGray90001 => const Color(0XFF313131);

  // DeepOrange
  Color get deepOrange300 => const Color(0XFFFE9C5E);

  // Gray
  Color get gray300 => const Color(0XFFE5E5E5);
  Color get gray400 => const Color(0XFFBDBDBD);
  Color get gray500 => const Color(0XFFA5A5A7);
  Color get gray700 => const Color(0XFF636363);

  // Indigo
  Color get indigo400 => const Color(0XFF6357CC);
  Color get indigo40001 => const Color(0XFF6155CC);
  Color get indigo50 => const Color(0XFFE0DDF5);
  Color get indigo600 => const Color(0XFF3C5A9A);
  Color get royalty => const Color(0XFF6022AB);

  // Red
  Color get red300 => const Color(0XFFF77777);
  Color get red500 => const Color(0XFFEB4335);

  // Teal
  Color get teal300 => const Color(0XFF3EC8BC);
  Color get puffyLittleCloud => const Color(0xFFD9EDEB);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);

  // yellow
  Color get marigold => const Color(0XFFFFC107);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
